/**
* TargetGroupQueries
* 
* A list of queries that enrich the TargetGroup and TargetGroupCfg with operations to easier query their state.
*
*/
library TargetGroupQueries;

modeltype ELASTICITY_MOD uses 'http://palladiosimulator.org/Elasticity/1.0';
modeltype ELASTICITY_ADJ uses 'http://palladiosimulator.org/Elasticity/Adjustments/1.0';
modeltype ELASTICITY_TRI uses 'http://palladiosimulator.org/Elasticity/Triggers/1.0';
modeltype ELASTICITY_TAR uses 'http://palladiosimulator.org/Elasticity/Targets/1.0';

modeltype ELASTICITY_CONT uses 'http://palladiosimulator.org/Elasticity/Constraints/Target/1.0';
modeltype SCALABLEPCMGROUPS uses 'http://palladiosimulator.org/ScalablePCMGroups/1.0';


modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_USG uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';


query SCALABLEPCMGROUPS::TargetGroup::numberOfElements():Integer{
	switch { 
		case (self.oclIsKindOf(ServiceGroup)) {
			return self.oclAsType(ServiceGroup).elements->size();		
		} 
		case (self.oclIsKindOf(CompetingConsumersGroup)) {
			return self.oclAsType(CompetingConsumersGroup).elements->size();
		} 
		case (self.oclIsKindOf(InfrastructureGroup)){
			return self.oclAsType(InfrastructureGroup).elements->size();
		}
		else {
			return assert fatal(false) with log('Number of elements invoked for an unknown subtype of TargetGroupCfg');
		} 
	};
}

query OrderedSet(SCALABLEPCMGROUPS::TargetGroup)::retrieveServiceTargetOfPolicy(policy:ScalingPolicy) : SCALABLEPCMGROUPS::TargetGroup {
	return self->selectOne(cfg | cfg.retrieveUnit() = policy.targetGroup.retrieveUnit());
}

query TargetGroup::retrieveUnit():AssemblyContext {
	switch { 
		case (self.oclIsKindOf(ServiceGroupTarget)) {
			return self.oclAsType(ServiceGroupTarget).serviceGroup.unit.oclAsType(AssemblyContext);		
		} 
		case (self.oclIsKindOf(CompetingConsumersGroupTarget)) {
			return self.oclAsType(CompetingConsumersGroupTarget).competingConsumersGroup.unit.oclAsType(AssemblyContext);
		} 
	};
	return assert fatal (false) with log('cannot retrieve unit assembly for non-services');	
}

query SCALABLEPCMGROUPS::TargetGroup::retrieveAssemblyElements():OrderedSet(AssemblyContext){
	switch { 
		case (self.oclIsKindOf(ServiceGroup)) {
			return self.oclAsType(ServiceGroup).elements;		
		} 
		case (self.oclIsKindOf(CompetingConsumersGroup)) {
			return self.oclAsType(CompetingConsumersGroup).elements;
		} 
	};
	return assert fatal (not self.isServicePattern()) with log('cannot retrieve assembly elements for non-services');	
}

query SCALABLEPCMGROUPS::TargetGroup::retrieveUnit():AssemblyContext{
	switch { 
		case (self.oclIsKindOf(ServiceGroup)) {
			return self.oclAsType(ServiceGroup).unit;		
		} 
		case (self.oclIsKindOf(CompetingConsumersGroup)) {
			return self.oclAsType(CompetingConsumersGroup).unit;
		} 
	};
	return assert fatal (not self.isServicePattern()) with log('cannot retrieve unit assembly for non-services');	
}

query SCALABLEPCMGROUPS::TargetGroup::isServicePattern():Boolean {
	return self.oclIsKindOf(ServiceGroup) or self.oclIsKindOf(CompetingConsumersGroup);
}

query TargetGroup::isServicePattern():Boolean {
	return self.oclIsKindOf(ServiceGroupTarget) or self.oclIsKindOf(CompetingConsumersGroupTarget);
}