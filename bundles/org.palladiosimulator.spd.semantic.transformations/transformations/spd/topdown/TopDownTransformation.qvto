import spd.common.AdjustmentCalculator;

modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';

modeltype SPD_MOD uses 'http://palladiosimulator.org/ScalingPolicyDefinition/1.0';
modeltype SPD_ADJ uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Adjustments/1.0';
modeltype SPD_TRI uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Triggers/1.0';
modeltype SPD_TAR uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Targets/1.0';

modeltype SPD_CON uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/1.0';
modeltype SPD_CONP uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Policy/1.0';
modeltype SPD_CONT uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Target/1.0';

modeltype SPD_SEM uses 'http://palladiosimulator.org/ScalingPolicyDefinitionSemantic/1.0';


transformation TopDownTransformation(	inout pcmAllocation : PCM_ALLOC,
										inout pcmSystem : PCM_SYS,
										inout pcmResourceEnvironment : PCM_RES_ENV,
										inout repository : PCM_REP,
										in spd : SPD_MOD,
										inout spdSemantic : SPD_SEM);
	
main(){
	
}


mapping inout ServiceGroupCfg::transformServiceGroup(enactedPolicy:ScalingPolicy){
	init {
		var system:System :=  pcmSystem.rootObjects()[System]->any(true);
		var assembliesDiff:Set(AssemblyContext) := ComputeDiffBasedOnAdjustmentType(enactedPolicy.adjustmentType, self.elements->size());
	}
	
	
}

helper ComputeDiffBasedOnAdjustmentType(adjustment: AdjustmentType, currentSize:Integer) : Set(AssemblyContext){

	var assembliesDiff : Set(AssemblyContext) := Set{};
	var desiredChange : Real := Interprete_adjustmentType(adjustment, currentSize);
	log('Current number of assemblies ' + currentSize.toString());
	
	//TODO:Create Assemblies	
	// in case 0 -> no change desired, in case > 0 -> add by creating new ones, in case < 0 -> select existing
	if(desiredChange>0) {
		var i : Integer := 0;
		while (i < desiredChange) {
			log('lets create');		
//			var resourceContainer := Helper_createResourceContainerBasedOn(elasticInfrastructureCfg.unit);
//			newAssemblies += resourceContainer;
			i := i + 1;
		};						
	} else if (desiredChange<0){
		desiredChange := desiredChange.abs();
		var index : Integer := desiredChange.round();
//		resourceContainers += elasticInfrastructureCfg.elements->subOrderedSet(1, index);
	};	
	return assembliesDiff;

}
