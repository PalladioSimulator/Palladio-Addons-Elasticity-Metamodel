library TopDownTransformationServices;
import spd.common.AdjustmentCalculator;
import spd.common.ServiceGroupRepositoryTransformation;

import pcm.helpers.Constructors;
import pcm.helpers.Commons;
import pcm.helpers.Wiring;

modeltype PCM uses 'http://palladiosimulator.org/PalladioComponentModel/5.2';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';

modeltype SPD_MOD uses 'http://palladiosimulator.org/ScalingPolicyDefinition/1.0';
modeltype SPD_ADJ uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Adjustments/1.0';
modeltype SPD_TRI uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Triggers/1.0';
modeltype SPD_TAR uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Targets/1.0';

modeltype SPD_CON uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/1.0';
modeltype SPD_CONP uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Policy/1.0';
modeltype SPD_CONT uses 'http://palladiosimulator.org/ScalingPolicyDefinition/Constraints/Target/1.0';

modeltype SPD_SEM uses 'http://palladiosimulator.org/ScalingPolicyDefinitionSemantic/1.0';


// The mapping transforms the service group configuration, as a side-effect creates new assemblies.
mapping inout ServiceGroupCfg::transformServiceGroup(enactedPolicy:ScalingPolicy, system:System){
	init {
		var assembliesDiff:Set(AssemblyContext) := ComputeDiffBasedOnAdjustmentType(self.unit, enactedPolicy.adjustmentType, system, self);
		var union:Set(AssemblyContext) := self.elements->union(assembliesDiff);
		var intersection:Set(AssemblyContext) := self.elements->intersection(assembliesDiff);
		var currentElements:Set(AssemblyContext) := self.elements;
	}
	
	elements := union - intersection;
	
	if(intersection->size()=0 and union->size()>currentElements->size() ){
		self.loadBalancingAssembly.encapsulatedComponent__AssemblyContext[BasicComponent].map modifyLoadBalancer(self);
		system.map modifySystemModel(self);
	};
	
//	if(intersection->size()>0){
//		allocation.map modifyAllocationOnScaleIn(elements);
//		self.loadBalancingAssembly.encapsulatedComponent__AssemblyContext[BasicComponent].map modifyLoadBalancerOnScaleIn(self);
//		system.map modifySystemModelOnScaleIn(self);
//	};	

	enactedPolicies += enactedPolicy;
}
//
//
// @return Set(AssemblyContext) assemblies that should be added or removed.
helper ComputeDiffBasedOnAdjustmentType(unitAssembly:AssemblyContext, adjustment: AdjustmentType, system:System, serviceGroupCfg:ServiceGroupCfg) : Set(AssemblyContext){

	var assembliesDiff : Set(AssemblyContext) := Set{};
	var desiredChange : Real := Interprete_adjustmentType(adjustment, serviceGroupCfg.elements->size());
	log('Current number of assemblies ' + serviceGroupCfg.elements->size().toString());
	var uniqueContext:AssemblyContext := unitAssembly;
	//TODO:Create Assemblies	
	// in case 0 -> no change desired, in case > 0 -> add by creating new ones, in case < 0 -> select existing
	if(desiredChange>0) {
		var i : Integer := 0;
		while (i < desiredChange) {
			log('lets create');		
			var assemblyCtx := Commons_createAssemblyContextNoAllocation(unitAssembly.encapsulatedComponent__AssemblyContext, uniqueContext, system);
			uniqueContext := assemblyCtx;
			assembliesDiff += assemblyCtx;
			i := i + 1;
		};						
	} else if (desiredChange<0){
		desiredChange := desiredChange.abs();
		var index : Integer := desiredChange.round();
		assembliesDiff += serviceGroupCfg.elements->subOrderedSet(1, index);
	};	
	return assembliesDiff;

}

